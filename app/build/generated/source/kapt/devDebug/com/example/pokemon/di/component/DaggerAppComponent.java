// Generated by Dagger (https://dagger.dev).
package com.example.pokemon.di.component;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.pokemon.App;
import com.example.pokemon.App_MembersInjector;
import com.example.pokemon.base.AppViewModelFactory;
import com.example.pokemon.base.AppViewModelFactory_Factory;
import com.example.pokemon.base.BaseActivity_MembersInjector;
import com.example.pokemon.base.BaseFragment_MembersInjector;
import com.example.pokemon.data.AppDatabase;
import com.example.pokemon.data.DataManager;
import com.example.pokemon.data.DataManager_Factory;
import com.example.pokemon.data.PreferencesHelper;
import com.example.pokemon.data.PreferencesHelper_Factory;
import com.example.pokemon.di.modules.AppModule;
import com.example.pokemon.di.modules.AppModule_ProvideAppDatabaseFactory;
import com.example.pokemon.di.modules.AppModule_ProvideContextFactory;
import com.example.pokemon.di.modules.BuildersModule_BindDetailPokemonActivity;
import com.example.pokemon.di.modules.BuildersModule_BindListPokemonActivity;
import com.example.pokemon.di.modules.FragmentBuildersModule_ContributeBaseStatFragment;
import com.example.pokemon.di.modules.FragmentBuildersModule_ContributeMovesFragment;
import com.example.pokemon.di.modules.NetworkModule;
import com.example.pokemon.di.modules.NetworkModule_ProvideAPIFactory;
import com.example.pokemon.di.modules.NetworkModule_ProvideGsonFactory;
import com.example.pokemon.di.modules.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.example.pokemon.di.modules.NetworkModule_ProvideOkHttpClientFactory;
import com.example.pokemon.di.modules.NetworkModule_ProvideRetrofitFactory;
import com.example.pokemon.feature.detailpokemon.DetailPokemonActivity;
import com.example.pokemon.feature.detailpokemon.DetailPokemonActivity_MembersInjector;
import com.example.pokemon.feature.detailpokemon.DetailPokemonViewModel;
import com.example.pokemon.feature.detailpokemon.DetailPokemonViewModel_Factory;
import com.example.pokemon.feature.detailpokemon.basestat.BaseStatFragment;
import com.example.pokemon.feature.detailpokemon.basestat.BaseStatViewModel;
import com.example.pokemon.feature.detailpokemon.basestat.BaseStatViewModel_Factory;
import com.example.pokemon.feature.detailpokemon.moves.MovesFragment;
import com.example.pokemon.feature.detailpokemon.moves.MovesViewModel;
import com.example.pokemon.feature.detailpokemon.moves.MovesViewModel_Factory;
import com.example.pokemon.feature.listpokemon.ListPokemonActivity;
import com.example.pokemon.feature.listpokemon.ListPokemonViewModel;
import com.example.pokemon.feature.listpokemon.ListPokemonViewModel_Factory;
import com.example.pokemon.network.APIService;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent.Factory> detailPokemonActivitySubcomponentFactoryProvider;

  private Provider<BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent.Factory> listPokemonActivitySubcomponentFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<APIService> provideAPIProvider;

  private Provider<App> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<PreferencesHelper> preferencesHelperProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<DataManager> dataManagerProvider;

  private Provider<BaseStatViewModel> baseStatViewModelProvider;

  private Provider<MovesViewModel> movesViewModelProvider;

  private Provider<DetailPokemonViewModel> detailPokemonViewModelProvider;

  private Provider<ListPokemonViewModel> listPokemonViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<AppViewModelFactory> appViewModelFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, NetworkModule networkModuleParam,
      App applicationParam, NetworkModule networkModuleParam2) {

    initialize(appModuleParam, networkModuleParam, applicationParam, networkModuleParam2);

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(DetailPokemonActivity.class, (Provider) detailPokemonActivitySubcomponentFactoryProvider).put(ListPokemonActivity.class, (Provider) listPokemonActivitySubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final NetworkModule networkModuleParam,
      final App applicationParam, final NetworkModule networkModuleParam2) {
    this.detailPokemonActivitySubcomponentFactoryProvider = new Provider<BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent.Factory>() {
      @Override
      public BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent.Factory get(
          ) {
        return new DetailPokemonActivitySubcomponentFactory(appComponent);
      }
    };
    this.listPokemonActivitySubcomponentFactoryProvider = new Provider<BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent.Factory>() {
      @Override
      public BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent.Factory get() {
        return new ListPokemonActivitySubcomponentFactory(appComponent);
      }
    };
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(NetworkModule_ProvideHttpLoggingInterceptorFactory.create(networkModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam, provideHttpLoggingInterceptorProvider));
    this.provideGsonProvider = DoubleCheck.provider(NetworkModule_ProvideGsonFactory.create(networkModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideOkHttpClientProvider, provideGsonProvider));
    this.provideAPIProvider = DoubleCheck.provider(NetworkModule_ProvideAPIFactory.create(networkModuleParam, provideRetrofitProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider);
    this.preferencesHelperProvider = DoubleCheck.provider(PreferencesHelper_Factory.create(provideContextProvider));
    this.provideAppDatabaseProvider = DoubleCheck.provider(AppModule_ProvideAppDatabaseFactory.create(appModuleParam, applicationProvider));
    this.dataManagerProvider = DoubleCheck.provider(DataManager_Factory.create(provideAPIProvider, preferencesHelperProvider, provideAppDatabaseProvider));
    this.baseStatViewModelProvider = BaseStatViewModel_Factory.create(dataManagerProvider);
    this.movesViewModelProvider = MovesViewModel_Factory.create(dataManagerProvider);
    this.detailPokemonViewModelProvider = DetailPokemonViewModel_Factory.create(dataManagerProvider);
    this.listPokemonViewModelProvider = ListPokemonViewModel_Factory.create(dataManagerProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4).put(BaseStatViewModel.class, (Provider) baseStatViewModelProvider).put(MovesViewModel.class, (Provider) movesViewModelProvider).put(DetailPokemonViewModel.class, (Provider) detailPokemonViewModelProvider).put(ListPokemonViewModel.class, (Provider) listPokemonViewModelProvider).build();
    this.appViewModelFactoryProvider = DoubleCheck.provider(AppViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private App application;

    private NetworkModule networkModule;

    @Override
    public Builder application(App application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, App.class);
      Preconditions.checkBuilderRequirement(networkModule, NetworkModule.class);
      return new DaggerAppComponent(new AppModule(), new NetworkModule(), application, networkModule);
    }
  }

  private static final class DetailPokemonActivitySubcomponentFactory implements BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private DetailPokemonActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent create(
        DetailPokemonActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DetailPokemonActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class DetailPokemonActivitySubcomponentImpl implements BuildersModule_BindDetailPokemonActivity.DetailPokemonActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl = this;

    private Provider<FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent.Factory> baseStatFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent.Factory> movesFragmentSubcomponentFactoryProvider;

    private DetailPokemonActivitySubcomponentImpl(DaggerAppComponent appComponent,
        DetailPokemonActivity arg0Param) {
      this.appComponent = appComponent;

      initialize(arg0Param);

    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(DetailPokemonActivity.class, (Provider) appComponent.detailPokemonActivitySubcomponentFactoryProvider).put(ListPokemonActivity.class, (Provider) appComponent.listPokemonActivitySubcomponentFactoryProvider).put(BaseStatFragment.class, (Provider) baseStatFragmentSubcomponentFactoryProvider).put(MovesFragment.class, (Provider) movesFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DetailPokemonActivity arg0Param) {
      this.baseStatFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent.Factory get(
            ) {
          return new BaseStatFragmentSubcomponentFactory(appComponent, detailPokemonActivitySubcomponentImpl);
        }
      };
      this.movesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent.Factory get(
            ) {
          return new MovesFragmentSubcomponentFactory(appComponent, detailPokemonActivitySubcomponentImpl);
        }
      };
    }

    @Override
    public void inject(DetailPokemonActivity arg0) {
      injectDetailPokemonActivity(arg0);
    }

    private DetailPokemonActivity injectDetailPokemonActivity(DetailPokemonActivity instance) {
      BaseActivity_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
      DetailPokemonActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }

    private static final class BaseStatFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent.Factory {
      private final DaggerAppComponent appComponent;

      private final DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl;

      private BaseStatFragmentSubcomponentFactory(DaggerAppComponent appComponent,
          DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl) {
        this.appComponent = appComponent;
        this.detailPokemonActivitySubcomponentImpl = detailPokemonActivitySubcomponentImpl;
      }

      @Override
      public FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent create(
          BaseStatFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BaseStatFragmentSubcomponentImpl(appComponent, detailPokemonActivitySubcomponentImpl, arg0);
      }
    }

    private static final class BaseStatFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeBaseStatFragment.BaseStatFragmentSubcomponent {
      private final DaggerAppComponent appComponent;

      private final DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl;

      private final BaseStatFragmentSubcomponentImpl baseStatFragmentSubcomponentImpl = this;

      private BaseStatFragmentSubcomponentImpl(DaggerAppComponent appComponent,
          DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl,
          BaseStatFragment arg0Param) {
        this.appComponent = appComponent;
        this.detailPokemonActivitySubcomponentImpl = detailPokemonActivitySubcomponentImpl;


      }

      @Override
      public void inject(BaseStatFragment arg0) {
        injectBaseStatFragment(arg0);
      }

      private BaseStatFragment injectBaseStatFragment(BaseStatFragment instance) {
        BaseFragment_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
        return instance;
      }
    }

    private static final class MovesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent.Factory {
      private final DaggerAppComponent appComponent;

      private final DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl;

      private MovesFragmentSubcomponentFactory(DaggerAppComponent appComponent,
          DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl) {
        this.appComponent = appComponent;
        this.detailPokemonActivitySubcomponentImpl = detailPokemonActivitySubcomponentImpl;
      }

      @Override
      public FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent create(
          MovesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MovesFragmentSubcomponentImpl(appComponent, detailPokemonActivitySubcomponentImpl, arg0);
      }
    }

    private static final class MovesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeMovesFragment.MovesFragmentSubcomponent {
      private final DaggerAppComponent appComponent;

      private final DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl;

      private final MovesFragmentSubcomponentImpl movesFragmentSubcomponentImpl = this;

      private MovesFragmentSubcomponentImpl(DaggerAppComponent appComponent,
          DetailPokemonActivitySubcomponentImpl detailPokemonActivitySubcomponentImpl,
          MovesFragment arg0Param) {
        this.appComponent = appComponent;
        this.detailPokemonActivitySubcomponentImpl = detailPokemonActivitySubcomponentImpl;


      }

      @Override
      public void inject(MovesFragment arg0) {
        injectMovesFragment(arg0);
      }

      private MovesFragment injectMovesFragment(MovesFragment instance) {
        BaseFragment_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private static final class ListPokemonActivitySubcomponentFactory implements BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private ListPokemonActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent create(
        ListPokemonActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ListPokemonActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class ListPokemonActivitySubcomponentImpl implements BuildersModule_BindListPokemonActivity.ListPokemonActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final ListPokemonActivitySubcomponentImpl listPokemonActivitySubcomponentImpl = this;

    private ListPokemonActivitySubcomponentImpl(DaggerAppComponent appComponent,
        ListPokemonActivity arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(ListPokemonActivity arg0) {
      injectListPokemonActivity(arg0);
    }

    private ListPokemonActivity injectListPokemonActivity(ListPokemonActivity instance) {
      BaseActivity_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
      return instance;
    }
  }
}
